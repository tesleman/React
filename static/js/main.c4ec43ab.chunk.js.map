{"version":3,"sources":["Components/Header/Header.module.css","Components/Profile/Profile.module.css","Components/Sidebar/Sidebar.module.css","Components/Preloader/preloader.module.css","Components/Login/login.module.css","Components/FormValidate/FormValidate.module.css","Components/Profile/Detail.module.css","serviceWorker.js","Components/api/api.ts","redux/Redusers/message-reducers.ts","Components/validations/validations.ts","redux/Redusers/users-reducers.ts","redux/Redusers/profile-reducers.ts","redux/Redusers/auth-reducer.ts","redux/Redusers/app-reducer.ts","redux/redux-store.ts","Components/Sidebar/Sidebar.tsx","Components/Footer/Footer.tsx","Components/Stories/StoriesItem/StoriesItem.tsx","Components/Login/FormValidate.tsx","Components/Stories/Stories.tsx","Components/hok/WidhAuthRedirect.tsx","Components/Stories/StoriesContainer.tsx","Components/Preloader/Preloader.tsx","Components/Users/UsersClass.tsx","redux/Selectors/user-selectors.js","Components/Users/UsercContainer.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/FormValidate/FormEditProfile.tsx","redux/Selectors/propfile-selector.js","Components/FormValidate/EditProfile.tsx","Components/Login/Login.tsx","Components/Profile/Profile.tsx","Components/Profile/Detail.tsx","Components/Profile/Status.tsx","Components/Profile/ProfilClass.tsx","App.jsx","index.jsx","Components/Stories/Stories.module.css","Components/Users/usrs.module.css","Components/Profile/Status.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","ResultCodesEnum","initialState","messages","message","id","messageReducers","state","action","type","newPost","postMessage","copyState","instance","axios","create","baseURL","withCredentials","headers","max","usersApi","page","size","get","then","response","data","usersFollowing","uId","delete","post","getUsersProfile","userId","status","put","file","formData","FormData","append","console","log","getAuth","rememberMe","captcha","users","pageSize","currentPage","total","isLoading","loadingButton","loadingButtonStatus","follow","unfollow","setUsers","setLoading","loadingStatus","setButtonLoading","userReducers","map","u","followed","pages","filter","SET_USER_PHOTO","profile","photos","setProfile","payload","setStatus","profileReducers","email","login","isAuth","loading","setAuth","thunkSetAuth","dispatch","a","resultCode","authReducers","appReducers","reducersRoot","combineReducers","messageReduser","usersPage","auth","userProfile","form","formReducer","app","store","createStore","applyMiddleware","thunk","compose","connect","myId","props","className","s","sideNav","to","Footer","href","StoriesItem","stories_item","renderField","input","label","meta","touched","error","placeholder","reqaer","value","undefined","website","minValue13","length","StoriesForm","reduxForm","onSubmit","handleSubmit","wrapper","Field","component","validate","name","textarea","Button","stories_btn","variant","Stories","React","memo","m","key","addPost","Container","Col","md","span","offset","mapStateToPropsForRedirect","WrappedComponent","restProps","text","addPostActionCreator","Preloader","lds_ring","UsersClass","thunkSetUsers","thunkCurrentPage","thunkUnFollow","thunkFollow","useEffect","pag","Math","ceil","tanks","card","photo","src","small","alt","disabled","some","onClick","initialPage","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","number","val","Object","values","containerClassName","activeClassName","getId","getState","items","totalCount","withRouter","history","push","NavDropdown","title","Item","padding_0","thunkLogout","renderEditField","fieldCreator","min","EditFormForm","target","useRef","ref","field","Overlay","show","placement","current","containerPadding","Popover","Title","as","Content","style","marginBottom","thunkChangProfile","color","Row","xl","sm","minLenght","ContactForm","htmlFor","thunkLogin","stopSubmit","_error","Profile","hiddenFileInput","click","maxWidth","display","onChange","event","fileUploaded","files","handleFile","titles","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Contact","Detail","greed","colSpan","keys","contacts","Status","useState","editMod","setEditMode","width","Form","Group","Control","collor","float","thunkPutStatus","disabledEditMode","textColor","activeEditMode","Label","thunkSetProfile","thunkGetStatus","dataStatus","params","textAlign","App","this","initializeThunk","HeaderContainer","exact","path","render","StoriesContainer","Component","promise","Promise","all","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c4ec43ab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"padding_0\":\"Header_padding_0__wJOaN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titles\":\"Profile_titles__3UPg5\",\"card\":\"Profile_card__22QhY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideNav\":\"Sidebar_sideNav__k8UkS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lds_ring\":\"preloader_lds_ring__1BkuL\",\"lds-ring\":\"preloader_lds-ring__2KCmX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"href\":\"login_href__3DKH7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"FormValidate_field__xFMHF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"greed\":\"Detail_greed__1Mwd_\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\nimport {profileType, setProfileActionTypePayload} from \"../../redux/Redusers/profile-reducers\";\r\nimport {photosType, usersType} from \"../../redux/Redusers/users-reducers\";\r\n\r\n\r\nlet instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"393404f6-a7c7-4502-8bb9-dd6390bbf708\"\r\n    }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\ntype APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\ntype getUsersType = {\r\n    items: Array<usersType>\r\n    totalCount: number\r\n    error: string\r\n}\r\nexport let usersApi = {\r\n    getUsers(page: number, size: number) {\r\n        return instance.get<getUsersType>(`users?page=${page}&count=${size}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n\r\n}\r\nexport let usersFollowing = {\r\n    unFollow(uId: number) {\r\n        return instance.delete<APIResponseType>(`follow/${uId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    follow(uId: number) {\r\n        return instance.post<APIResponseType>(`follow/${uId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\ntype SavePhotoResponseDataType = {\r\n    photos: photosType\r\n}\r\nexport let getUsersProfile = {\r\n    userProfile(userId: number) {\r\n        return instance.get<APIResponseType<profileType>>(`profile/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getStatus(userId: number) {\r\n\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    putStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status/`, {status: status})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    putPhotos(file: File) {\r\n        let formData = new FormData();\r\n        formData.append(\"image\", file);\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`/profile/photo/`, formData)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    ChangProfile(formData: setProfileActionTypePayload) {\r\n        return instance.put<APIResponseType>(`/profile`, {...formData, userId: 8614})\r\n            .then(response => {\r\n                console.log(response.data)\r\n                return response.data\r\n            })\r\n\r\n    },\r\n\r\n}\r\n\r\ntype authMeType = {\r\n    email: string\r\n    login: string\r\n    id: number\r\n}\r\ntype loginType = {\r\n    id: number\r\n}\r\nexport let getAuth = {\r\n    auth() {\r\n        return instance.get<APIResponseType<authMeType>>(`auth/me`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    login(formData: setProfileActionTypePayload) {\r\n\r\n        return instance.post<APIResponseType<loginType>>(`auth/login/`, {...formData, rememberMe: true, captcha: true})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    logout() {\r\n        return instance.delete<APIResponseType>(`auth/login/`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n\r\n    }\r\n}\r\n\r\n\r\n","let ADD_POST = 'ADD-POST'\r\n\r\nexport type messagesType = {\r\n    message: string\r\n    id: number\r\n}\r\n\r\nlet initialState = {\r\n    messages: [\r\n        {message: 'safsdfasdf', id: 1},\r\n        {message: 'sfdg', id: 2},\r\n        {message: 'sgdf', id: 3},\r\n    ] as Array<messagesType>\r\n}\r\n\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nconst messageReducers = (state = initialState, action:any):initialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost = {\r\n                ...action.postMessage, id: 5,\r\n            }\r\n            let copyState = {...state}\r\n            copyState.messages = [...state.messages, newPost]\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype  addPostActionCreatorType = {\r\n    type: typeof ADD_POST\r\n    postMessage:string\r\n}\r\n\r\nexport let addPostActionCreator = (text: string):addPostActionCreatorType => ({type: ADD_POST, postMessage: text})\r\nexport default messageReducers\r\n","\r\nexport const minValue = (min:number) => (value:string) =>\r\n    value && value.length < min ? `Must be at least ${min}` : undefined\r\n\r\nexport const maxValue = (max:number) => (value:string) =>\r\n    value && value.length > max ? `Must be at least ${max}` : undefined\r\n\r\n\r\n\r\nexport const reqaer: FieldValidatorType =(value) =>\r\n    value ?  undefined:  \"require\"\r\n\r\n\r\nexport const website: FieldValidatorType =(value) =>\r\n    value.match(/[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi ) ?  undefined :  \"not site\"\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined","import {usersApi, usersFollowing} from \"../../Components/api/api\";\r\nimport {AppStateType} from \"../redux-store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET-USERS'\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE'\r\nconst SET_PAGES = 'SET-PAGES'\r\nconst IS_LOADING = 'LOADING'\r\nconst IS_LOADING_BUTTON = 'LOADING-BUTTON'\r\n\r\nexport type photosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\nexport type usersType = {\r\n    uniqueUrlName: null\r\n    name: string\r\n    id: number\r\n    photos: photosType\r\n    status: string | null\r\n    followed: boolean\r\n}\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<usersType>,\r\n    pageSize: 35,\r\n    currentPage: 140,\r\n    total: 1,\r\n    isLoading: true,\r\n    loadingButton: [] as Array<number>,\r\n    loadingButtonStatus: false\r\n}\r\ntype initialStateType = typeof initialState\r\nconst userReducers = (state = initialState, action: actionsTyped): initialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE:\r\n\r\n            return {...state, currentPage: action.currentPage}\r\n        case SET_PAGES:\r\n            return {...state, total: action.pages}\r\n\r\n        case IS_LOADING:\r\n            return {...state, isLoading: action.loadingStatus}\r\n\r\n        case IS_LOADING_BUTTON:\r\n\r\n            return {\r\n                ...state,\r\n                loadingButton: action.loadingButtonStatus\r\n                    ? [...state.loadingButton, action.userId]\r\n                    : state.loadingButton.filter(id => id !== action.userId)\r\n            }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype actionsTyped =\r\n    followType\r\n    | unfollowType\r\n    | setUsersType\r\n    | setCurrentPageType\r\n    | setCountType\r\n    | setLoadingType\r\n    | setButtonLoadingType\r\n\r\n\r\ntype followType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\nexport let follow = (userId: number): followType => ({type: FOLLOW, userId} as const)\r\ntype unfollowType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\nexport let unfollow = (userId: number): unfollowType => ({type: UNFOLLOW, userId} as const)\r\n\r\ntype setUsersType = {\r\n    type: typeof SET_USERS\r\n    users: Array<usersType>\r\n}\r\n\r\nexport let setUsers = (users: Array<usersType>) => ({type: SET_USERS, users} as const)\r\n\r\ntype setCurrentPageType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\nexport let setCurrentPage = (currentPage: number): setCurrentPageType => ({\r\n    type: SET_CURRENT_PAGE,\r\n    currentPage\r\n} as const)\r\n\r\ntype setCountType = {\r\n    type: typeof SET_PAGES\r\n    pages: number\r\n}\r\nexport let setCount = (pages: number): setCountType => ({type: SET_PAGES, pages} as const)\r\n\r\ntype setLoadingType = {\r\n    type: typeof IS_LOADING\r\n    loadingStatus: boolean\r\n}\r\nexport let setLoading = (loadingStatus: boolean): setLoadingType => ({type: IS_LOADING, loadingStatus} as const)\r\n\r\ntype setButtonLoadingType = {\r\n    type: typeof IS_LOADING_BUTTON\r\n    loadingButtonStatus: boolean\r\n    userId: number\r\n}\r\nexport let setButtonLoading = (loadingButtonStatus: boolean, userId: number) => ({\r\n    type: IS_LOADING_BUTTON,\r\n    loadingButtonStatus,\r\n    userId\r\n} as const)\r\n\r\n\r\ntype thunkType = ThunkAction<void, AppStateType, unknown, actionsTyped>\r\n\r\n\r\nexport let thunkSetUsers = (currentPage: number, pageSize: number): thunkType => async (dispatch, getState) => {\r\n    dispatch(setLoading(true))\r\n    let data = await usersApi.getUsers(currentPage, pageSize)\r\n    dispatch(setUsers(data.items))\r\n\r\n    dispatch(setCount(data.totalCount))\r\n    dispatch(setLoading(false))\r\n}\r\nexport let thunkCurrentPage = (number: number, pageSize: number): thunkType => async (dispatch) => {\r\n    dispatch(setLoading(true))\r\n    let data = await usersApi.getUsers(number, pageSize)\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setCurrentPage(number))\r\n    dispatch(setLoading(false))\r\n}\r\nexport let thunkUnFollow = (userId: number): thunkType => async (dispatch) => {\r\n    dispatch(setButtonLoading(true, userId))\r\n    let data = await usersFollowing.unFollow(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(unfollow(userId))\r\n    }\r\n    dispatch(setButtonLoading(false, userId))\r\n\r\n}\r\nexport let thunkFollow = (userId: number): thunkType => async (dispatch) => {\r\n    dispatch(setButtonLoading(true, userId))\r\n    let data = await usersFollowing.follow(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(follow(userId))\r\n    }\r\n    dispatch(setButtonLoading(false, userId))\r\n}\r\n\r\nexport default userReducers","import {getUsersProfile} from \"../../Components/api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../redux-store\";\r\n\r\n\r\nconst SET_USER_PROFILE = 'SRT-USER-PROFILE'\r\nconst SET_USER_STATUS = 'SRT-USER-STATUS'\r\nconst SET_USER_PHOTO = 'localhost/my-site/SET_USER_PHOTO'\r\n\r\nlet propfile = {\r\n    aboutMe: null as string | null,\r\n    contacts: {\r\n        facebook: null as string | null,\r\n        github: null as string | null,\r\n        instagram: null as string | null,\r\n        mainLink: null as string | null,\r\n        twitter: null as string | null,\r\n        vk:null as string | null,\r\n        website: null as string | null,\r\n        youtube: null as string | null,\r\n    },\r\n    fullName: null as string | null,\r\n    lookingForAJob: null as boolean | null,\r\n    lookingForAJobDescription: null as string | null,\r\n    photos: {\r\n        small: null as string | null,\r\n        large:  null as string | null,\r\n    },\r\n    userId: null as number | null,\r\n}\r\nexport type contactsType = {\r\n    facebook: string | null,\r\n    github: string | null,\r\n    instagram: string | null,\r\n    mainLink: string | null,\r\n    twitter: string | null,\r\n    vk: string | null,\r\n    website: string | null,\r\n    youtube: string | null,\r\n}\r\n\r\nexport type profileType = typeof propfile\r\n// export type  profileType = {\r\n//     aboutMe: string | null,\r\n//     contacts: {\r\n//         facebook: string | null,\r\n//         github: string | null,\r\n//         instagram: string | null,\r\n//         mainLink: string | null,\r\n//         twitter: string | null,\r\n//         vk: string | null,\r\n//         website: string | null,\r\n//         youtube: string | null,\r\n//         },\r\n//     fullName: string | null,\r\n//     lookingForAJob: boolean | null,\r\n//     lookingForAJobDescription: string | null,\r\n//     photos: PhotosType,\r\n//     userId: number | null\r\n// }\r\n\r\nexport type profilePayloadtype = {\r\n    profile: profileType | null,\r\n    status: string | null\r\n    photos: PhotosType | null\r\n}\r\n\r\ntype PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\n\r\nlet initialState = {\r\n    profile: null as profileType | null,\r\n    status: \"Default status\",\r\n    photos: null as PhotosType | null\r\n\r\n}\r\nconst profileReducers = (state = initialState, action: any): profilePayloadtype => {\r\n    switch (action.type) {\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.payload\r\n            }\r\n        case SET_USER_PHOTO:\r\n            return {...state, profile: {...state.profile, photos: action.photos} as profileType}\r\n        case SET_USER_STATUS:\r\n            return {...state, status: action.status}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype actionsProfileTypes = setProfileActionType  | setStatusType | setPhotosType\r\n\r\ntype thunkType = ThunkAction<void, AppStateType, unknown, actionsProfileTypes>\r\n\r\nexport type setProfileActionTypePayload = {\r\n    data:  profileType\r\n}\r\nexport type setProfileActionType = {\r\n    type: typeof SET_USER_PROFILE\r\n    payload: setProfileActionTypePayload\r\n}\r\n\r\nexport let setProfile = (data: setProfileActionTypePayload): setProfileActionType => ({\r\n    type: SET_USER_PROFILE,\r\n    payload: data\r\n})\r\n\r\ntype setStatusType = {\r\n    type: typeof SET_USER_STATUS\r\n    status: string\r\n}\r\n\r\nexport let setStatus = (status: string):setStatusType => ({type: SET_USER_STATUS, status} as const)\r\ntype setPhotosType={\r\n    type: typeof SET_USER_PHOTO\r\n    photos: PhotosType\r\n}\r\n\r\nexport let setPhotos = (photos: PhotosType):setPhotosType => ({type: SET_USER_PHOTO, photos})\r\n\r\n\r\nexport let thunkGetStatus = (userId: number):thunkType => async (dispatch) => {\r\n    let data = await getUsersProfile.getStatus(userId)\r\n    dispatch(setStatus(data))\r\n}\r\nexport let thunkPutStatus = (dataStatus: string):thunkType => async (dispatch) => {\r\n    let data = await getUsersProfile.putStatus(dataStatus)\r\n    if (data.resultCode === 0) {\r\n        dispatch(setStatus(dataStatus))\r\n    }\r\n}\r\nexport let thunkSetProfile = (userId: number):thunkType => async (dispatch) => {\r\n    let data = await getUsersProfile.userProfile(userId)\r\n    dispatch(setProfile(data))\r\n}\r\nexport let handleFile = (file: File):thunkType => async (dispatch) => {\r\n    let data = await getUsersProfile.putPhotos(file)\r\n    if (data.resultCode === 0) {\r\n        dispatch(setPhotos(data.data.photos))\r\n    }\r\n}\r\n\r\nexport let thunkChangProfile = (data: setProfileActionTypePayload):thunkType => async (dispatch) => {\r\n    let response = await getUsersProfile.ChangProfile(data)\r\n    if (response.resultCode === 0)\r\n        dispatch(setProfile(data))\r\n\r\n}\r\nexport default profileReducers","import {getAuth} from \"../../Components/api/api\";\r\nimport {FormErrors, stopSubmit} from \"redux-form\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../redux-store\";\r\nimport {FormAction} from \"redux-form/lib/actions\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst SET_USER_PROFILE = 'SET-USER-PROFILE'\r\nconst LOADING_LOGIN_BUTTON = 'LOADING_LOGIN_BUTTON'\r\nlet initialState = {\r\n    email: null as string | null,\r\n    id: null as number | null,\r\n    login: null as string | null,\r\n    isAuth: false as boolean | false,\r\n    loading: false as boolean | false\r\n}\r\ntype  initialStateType = typeof initialState\r\n\r\nconst authReducers = (state = initialState, action: any): initialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            }\r\n        case LOADING_LOGIN_BUTTON:\r\n            return {\r\n                ...state,\r\n                loading: action.loading,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype stopSubmitType = {stopSubmit(form: string, errors?: FormErrors<any, any>): FormAction;}\r\ntype actionsTyped = setAuthType | isLoadingType\r\ntype setAuthType = {\r\n    type: typeof SET_USER_PROFILE\r\n    data: { email: string | null, id: number | null, login: string | null, isAuth: boolean }\r\n}\r\n\r\nexport let setAuth = (email: string | null, id: number | null, login: string | null, isAuth: boolean): setAuthType => ({\r\n    type: SET_USER_PROFILE,\r\n    data: {email, id, login, isAuth}\r\n})\r\n\r\ntype isLoadingType = {\r\n    type: typeof LOADING_LOGIN_BUTTON\r\n    loading: boolean\r\n}\r\n\r\nexport let isLoading = (loading: boolean): isLoadingType => ({type: LOADING_LOGIN_BUTTON, loading})\r\n\r\n\r\ntype thunkType = ThunkAction<void, AppStateType, unknown, actionsTyped>\r\n\r\nexport let thunkSetAuth = (): thunkType => async (dispatch) => {\r\n    let data = await getAuth.auth()\r\n    if (data.resultCode === 0) {\r\n        let {email, id, login} = data.data\r\n        dispatch(setAuth(email, id, login, true))\r\n    }\r\n\r\n}\r\nexport let thunkLogin = (formData: any)=> async (dispatch:any ) => {\r\n    dispatch(isLoading(true))\r\n    let data = await getAuth.login(formData)\r\n    if (data.resultCode === 0) {\r\n     dispatch(thunkSetAuth())\r\n            dispatch(isLoading(false))\r\n    } else {\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Common Error\"\r\n        dispatch(stopSubmit('contact', {_error: message}))\r\n        dispatch(isLoading(false))\r\n    }\r\n}\r\nexport let thunkLogout = (): thunkType => async (dispatch) => {\r\n    let data = await getAuth.logout()\r\n    if (data.resultCode === 0) {\r\n        dispatch(setAuth(null, null, null, false))\r\n    } else {\r\n        console.log('regect')\r\n    }\r\n}\r\nexport default authReducers","import {thunkSetAuth} from \"./auth-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../redux-store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\n\r\n\r\nlet SET_LOADING = \"SET_LOADING\"\r\n\r\n\r\nlet initialState = {\r\n    isLoading: false as boolean,\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nconst appReducers = (state = initialState, action: any):initialStateType => {\r\n    switch (action.type) {\r\n        case SET_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype setLoadingType = {\r\n    type: typeof SET_LOADING\r\n}\r\nexport let setLoading = ():setLoadingType => ({type: SET_LOADING})\r\ntype thunkType = ThunkAction<void, AppStateType, unknown, setLoadingType>\r\nexport let  initializeThunk = ():thunkType => (dispatch) =>{\r\nlet promise = dispatch(thunkSetAuth())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(setLoading())\r\n        })\r\n}\r\nexport default appReducers;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport messageReduser from \"./Redusers/message-reducers\";\r\nimport userReducers from \"./Redusers/users-reducers\";\r\nimport profileReducers from \"./Redusers/profile-reducers\";\r\nimport authReducers from \"./Redusers/auth-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducers from \"./Redusers/app-reducer\";\r\n\r\nlet reducersRoot = combineReducers({\r\n    messages: messageReduser,\r\n    usersPage: userReducers,\r\n    auth: authReducers,\r\n    userProfile: profileReducers,\r\n    form: formReducer,\r\n    app: appReducers\r\n})\r\ntype reducersRootType = typeof  reducersRoot\r\nexport type AppStateType = ReturnType<reducersRootType>\r\n\r\nlet store = createStore(reducersRoot, applyMiddleware(thunk));\r\n\r\nexport default store","import React from \"react\";\r\nimport s from \"./Sidebar.module.css\"\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport { HashLink as Link } from 'react-router-hash-link';\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype propsType ={\r\n    myId: number | null\r\n}\r\n\r\nconst Sidebar:React.FC<propsType> = (props) => {\r\n    return (\r\n        <ul className={s.sideNav}>\r\n            {props.myId ? <li> <Link to={`/Detail/`}>My Profile</Link></li> : ''}\r\n            <li> <Link to={'/Stories'}>My Stories</Link></li>\r\n            <li> <Link to={'/Users'}>Users</Link></li>\r\n        </ul>\r\n    );\r\n}\r\nlet mapStateToProps = (state:AppStateType):propsType => {\r\n   return{\r\n       myId: state.auth.id\r\n   }\r\n}\r\nexport default compose(\r\n    connect(mapStateToProps,{})) (Sidebar)","import React from \"react\";\r\n\r\nlet Footer = () =>{\r\n    return(\r\n\r\n        <div>\r\n            <footer className=\"page-footer\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col l6 s12\">\r\n                            <h5 className=\"white-text\">Footer Content</h5>\r\n                            <p className=\"grey-text text-lighten-4\">You can use rows and columns here to organize your\r\n                                footer content.</p>\r\n                        </div>\r\n                        <div className=\"col l4 offset-l2 s12\">\r\n                            <h5 className=\"white-text\">Links</h5>\r\n                            <ul>\r\n                                <li><a className=\"grey-text text-lighten-3\" href=\"#\">Link 1</a></li>\r\n\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"footer-copyright\">\r\n                    <div className=\"container\">\r\n                        © 2020 Copyright Text\r\n                        <a className=\"grey-text text-lighten-4 right\" href=\"#\">More Links</a>\r\n                    </div>\r\n                </div>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\nexport default Footer","import s from \"../Stories.module.css\";\r\nimport React from \"react\";\r\ntype propsType ={\r\n    messages: string\r\n}\r\nlet  StoriesItem = (props: propsType)=> {\r\n    return(\r\n        <div className={s.stories_item}>\r\n            <p>{props.messages}</p>\r\n        </div>\r\n    )\r\n}\r\nexport default StoriesItem","import React from \"react\";\r\nimport {WrappedFieldProps} from \"redux-form\";\r\n\r\n\r\nexport  type renderFieldType ={\r\n    label:string\r\n    type:string\r\n}\r\n\r\n\r\nexport const renderField:React.FC<WrappedFieldProps & renderFieldType>  = ({\r\n\r\n                                input,\r\n                                label,\r\n                                type,\r\n                                meta: { touched, error },\r\n                                ...props\r\n                            }) => (\r\n\r\n    <div>\r\n\r\n        <label>{label}</label>\r\n        <div>\r\n            <input  {...props}{...input} placeholder={label} type={type}   />\r\n            {touched &&\r\n            (error  &&\r\n                <span>{error}</span> )}\r\n        </div>\r\n    </div>\r\n\r\n)\r\n\r\n export type GetStringKeys<T> = Extract<keyof T, string>","import React from \"react\";\r\nimport s from './Stories.module.css'\r\nimport StoriesItem from \"./StoriesItem/StoriesItem\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Button, Col, Container} from \"react-bootstrap\";\r\nimport {renderField} from \"../Login/FormValidate\";\r\nimport {maxValue, reqaer} from \"../validations/validations\";\r\nimport {messagesType} from \"../../redux/Redusers/message-reducers\";\r\n// :React.FC <InjectedFormProps<{}>>\r\nconst minValue13 = maxValue(13)\r\ntype propsType={\r\n\r\n}\r\n\r\nconst StoriesForma:React.FC <InjectedFormProps<messageType, {}> & {}> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={s.wrapper}>\r\n                <Field component={renderField}\r\n\r\n                       validate={[minValue13, reqaer]}\r\n                       name=\"message\"\r\n                       type=\"text\"\r\n                       label=\"blabla\"\r\n                       className={s.textarea}/>\r\n                <br/>\r\n                <Button className={s.stories_btn} variant=\"light\" type=\"submit\">Send</Button>\r\n\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nlet StoriesForm = reduxForm<messageType, {}>({form: 'stories'})(StoriesForma)\r\n\r\ntype addPostType = {addPost:(text: messageType) => void }\r\ntype messageType = {\r\n    message: string\r\n}\r\nexport type MapPropsType = {\r\n    messages: Array<messagesType>\r\n}\r\nconst Stories:React.FC<MapPropsType & addPostType> = React.memo((props) => {\r\n     console.log(props)\r\n      let map = [...props.messages].map(m => <StoriesItem messages={m.message} key={m.id}/>)\r\n\r\n    let onSubmit = (message:messageType) => {\r\n        props.addPost(message)\r\n    }\r\n\r\n\r\n    return (<div>\r\n\r\n            <StoriesForm onSubmit={onSubmit}/>\r\n            <Container>\r\n                <Col md={{span: 6, offset: 2}}>\r\n                    {map}\r\n                </Col>\r\n\r\n            </Container>\r\n        </div>\r\n\r\n    )\r\n})\r\nexport default Stories","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\nexport function widthautAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (isAuth) return <Redirect to='/Detail'/>\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n// export const widthautAuthRedirect = (Component) =>{\r\n//     class RedirectComponent extends React.Component{\r\n//         render() {\r\n//             if (this.props.isAuth) return  <Redirect to={'/Detail'} />\r\n//             return <Component {...this.props}/>\r\n//         }\r\n//\r\n//\r\n//     }\r\n//     return connect(mapStateTToPropsWithAuthRedirect)(RedirectComponent)\r\n//\r\n// }","import {addPostActionCreator, messagesType} from \"../../redux/Redusers/message-reducers\";\r\nimport Stories from \"./Stories\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../hok/WidhAuthRedirect\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport React from \"react\";\r\n\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        messages: state.messages.messages\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch:Dispatch) => {\r\n    return {\r\n        addPost: (text:string) => {\r\n            dispatch(addPostActionCreator(text))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(withAuthRedirect,\r\nconnect(mapStateToProps, mapDispatchToProps))(Stories)\r\n\r\n","import React from \"react\"\r\nimport s from './preloader.module.css'\r\n\r\nlet Preloader = () => {\r\n    return<div className={s.lds_ring}>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n\r\n\r\n}\r\nexport default Preloader","import React, {FC, useEffect} from \"react\";\r\nimport s from \"./usrs.module.css\"\r\nimport Preloader from \"../Preloader/Preloader\";\r\nimport {Link} from \"react-router-dom\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport {Button, Col} from \"react-bootstrap\";\r\nimport ReactPaginate from 'react-paginate';\r\nimport {usersType} from \"../../redux/Redusers/users-reducers\";\r\n\r\n\r\nexport type mapDispatchType={\r\n    thunkSetUsers: (currentPage: number, pageSize:number) => void\r\n    thunkCurrentPage: (number: number , pageSize:number) => void\r\n    thunkUnFollow: (userId: number) => void\r\n    thunkFollow: (userId: number) => void\r\n}\r\n\r\n\r\nexport type  propsType = {\r\n    currentPage: number\r\n    pageSize:number\r\n    total: number\r\n    isLoading:boolean\r\n    userId:number\r\n    loadingButton: Array<number>\r\n    users: Array<usersType>\r\n}\r\n\r\nlet UsersClass:FC<propsType & mapDispatchType> = ({currentPage,\r\n                                    pageSize,\r\n                                    users,\r\n                                    thunkSetUsers,\r\n                                    thunkCurrentPage,\r\n                                    total,\r\n                                    isLoading,\r\n                                    userId,\r\n                                    loadingButton,\r\n                                    thunkUnFollow,\r\n                                    thunkFollow\r\n\r\n                                    }) => {\r\n\r\n    useEffect(() => {\r\n        if (users.length === 0) {\r\n            thunkSetUsers(currentPage, pageSize)\r\n        }\r\n\r\n\r\n    }, [users])\r\n\r\n\r\n    let onPageChang = (number:Object) => {\r\n        let val = Object.values(number)\r\n        thunkCurrentPage(val[0] + 1, pageSize)\r\n    }\r\n    let pag = Math.ceil(total / pageSize)\r\n    return (<Container>\r\n\r\n            {isLoading ? <Preloader/> : <Container>\r\n                <div className={s.tanks}>\r\n\r\n                    {users.map(u =>\r\n\r\n                        <div className={s.card}\r\n\r\n                                               key={u.id}>\r\n                        <Link to={'/Detail/' + u.id}>\r\n                            <img className={s.photo} src={\r\n                                u.photos.small ? u.photos.small : 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png'\r\n                            } alt={''}/></Link>\r\n                        <div>{u.name}</div>\r\n                            <div className={s.status}>{u.status ? u.status : \"...\"}</div>\r\n                        {userId ?( <div>{\r\n                            u.followed ?\r\n                                <Button variant=\"light\" disabled={\r\n                                    loadingButton.some(id => id === u.id)\r\n                                } onClick={() => {\r\n                                    thunkUnFollow(u.id)\r\n\r\n\r\n                                }}>unfollow </Button>\r\n                                : <Button variant=\"light\" disabled={\r\n                                    loadingButton.some(id => id === u.id)\r\n                                } onClick={() => {\r\n                                    thunkFollow(u.id)\r\n                                }}> follow </Button>\r\n\r\n                        }</div>) : ''}\r\n\r\n\r\n                    </div>)}\r\n\r\n\r\n                </div>\r\n            </Container>}\r\n\r\n\r\n            <Container>\r\n                <Col md={{span: 8, offset: 1}}>\r\n                    <ReactPaginate\r\n                        initialPage={+currentPage - 1}\r\n                        previousLabel={'previous'}\r\n                        nextLabel={'next'}\r\n                        breakLabel={'...'}\r\n                        breakClassName={'break-me'}\r\n                        pageCount={pag}\r\n                        marginPagesDisplayed={1}\r\n                        pageRangeDisplayed={10}\r\n                        onPageChange={onPageChang}\r\n                        containerClassName={'pagination'}\r\n                        activeClassName={'active'}\r\n                    />\r\n                </Col>\r\n            </Container>\r\n\r\n        </Container>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default UsersClass","\r\nexport let usersPage = (state) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport let pageSize = (state) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport let currentPage = (state) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport let total = (state) => {\r\n    return state.usersPage.total\r\n}\r\n\r\nexport let isLoading = (state) => {\r\n    return state.usersPage.isLoading\r\n}\r\n\r\nexport let loadingButton = (state) => {\r\n    return state.usersPage.loadingButton\r\n}\r\nexport let getId = (state) => {\r\n    return state.auth.id\r\n}\r\n","import {connect} from \"react-redux\";\r\nimport {\r\n    thunkSetUsers,\r\n    thunkCurrentPage,\r\n    thunkUnFollow,\r\n    thunkFollow,\r\n    usersType\r\n} from \"../../redux/Redusers/users-reducers\";\r\nimport UsersClass, {mapDispatchType, propsType} from \"./UsersClass\";\r\nimport {compose} from \"redux\";\r\nimport {currentPage, getId, isLoading, loadingButton, pageSize, total, usersPage} from \"../../redux/Selectors/user-selectors\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\ntype mapStateToPropsType ={\r\n    currentPage: number\r\n    pageSize:number\r\n    total: number\r\n    isLoading: boolean\r\n    userId: number\r\n    loadingButton: Array<number>\r\n    users: Array<usersType>\r\n\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType):mapStateToPropsType => {\r\n    return {\r\n        users: usersPage(state),\r\n        pageSize: pageSize(state),\r\n        currentPage: currentPage(state),\r\n        total: total(state),\r\n        isLoading: isLoading(state),\r\n        loadingButton: loadingButton(state),\r\n        userId: getId(state)\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    //<TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultRootState>\r\n    connect<propsType,mapDispatchType,{},AppStateType>(mapStateToProps, {\r\n        thunkSetUsers,\r\n        thunkCurrentPage,\r\n        thunkUnFollow,\r\n        thunkFollow\r\n    }),\r\n)(UsersClass)\r\n\r\n\r\n","import React, {useEffect} from 'react';\r\n\r\nimport {NavDropdown} from \"react-bootstrap\";\r\nimport { HashLink as Link } from 'react-router-hash-link';\r\nimport s from \"./Header.module.css\"\r\nimport {compose} from \"redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {propsType, thunkLogoutType} from \"./HeaderContainer\";\r\n\r\n\r\n\r\n\r\nconst Header: React.FC<RouteComponentProps & propsType & thunkLogoutType>  = (props) => {\r\n\r\n    useEffect(()=>{\r\n\r\n        if(!props.isAuth) {\r\n            props.history.push(\"/Login/\")\r\n        }\r\n\r\n\r\n    },[props.isAuth])\r\n\r\n    return (\r\n\r\n\r\n        <nav className=\"nav-wrapper\">\r\n            <div className=\"brand-logo\">Logo</div>\r\n\r\n            <form>\r\n                <ul className=\"right margin-right padding-0\">\r\n                    <li>\r\n                        { props.isAuth ?    <NavDropdown title={props.login} id=\"basic-nav-dropdown\">\r\n                                <NavDropdown.Item   className={s.padding_0} onClick={()=>{\r\n                                    props.thunkLogout()\r\n                                   props.history.push(\"/Login\")\r\n                                }}  href=\"#/Login\" >Logout</NavDropdown.Item>\r\n                                <NavDropdown.Item  href=\"#/Edit\" className={s.padding_0} >Edit Profile</NavDropdown.Item>\r\n\r\n                            </NavDropdown>\r\n\r\n                        : <Link to={'/Login'}>Login</Link>\r\n                        }\r\n\r\n                    </li>\r\n\r\n                </ul>\r\n            </form>\r\n        </nav>\r\n    );\r\n}\r\n\r\n\r\nexport default compose (withRouter) (Header)\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Header from \"./Header\";\r\nimport {thunkLogout} from \"../../redux/Redusers/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nexport type thunkLogoutType = {\r\n    thunkLogout:  ()=> void\r\n}\r\n\r\nlet HeaderContainerClass: React.FC<propsType & thunkLogoutType >  = (props)=> {\r\n\r\n\r\n\r\n\r\n        return (\r\n            <Header {...props}/>\r\n        );\r\n\r\n}\r\n\r\nexport type propsType ={\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType):propsType => ({\r\n\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\nexport default  connect(mapStateToProps, {thunkLogout})(HeaderContainerClass)\r\n","import React from \"react\";\r\nimport {WrappedFieldProps} from \"redux-form\";\r\nimport {renderFieldType} from \"../Login/FormValidate\";\r\n\r\nexport const renderEditField:React.FC<WrappedFieldProps & renderFieldType> = ({\r\n\r\n                                input,\r\n                                label,\r\n                                type,\r\n                                meta: {touched, error},\r\n                                ...props\r\n                            }) => (<div>\r\n        <label>{label}</label>\r\n        <div>\r\n            <input  {...props}{...input}  type={type} />\r\n            {touched &&\r\n            (error &&<span>{error}</span>)}\r\n        </div>\r\n    </div>\r\n\r\n)\r\n\r\n","\r\nexport let userId = (state) => {\r\n    return  state.auth.id\r\n}\r\nexport let profile = (state) => {\r\n    return  state.userProfile.profile\r\n}\r\nexport let status = (state) => {\r\n    return state.userProfile.status\r\n}","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm, WrappedFieldProps} from \"redux-form\";\r\nimport {Button, Col, Container, Row, Overlay, Popover} from \"react-bootstrap\";\r\nimport {connect} from \"react-redux\";\r\nimport {FieldValidatorType, reqaer, website} from \"../validations/validations\";\r\nimport {renderEditField} from \"./FormEditProfile\";\r\nimport {profileType, thunkChangProfile} from \"../../redux/Redusers/profile-reducers\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport s from './FormValidate.module.css'\r\nimport {renderFieldType} from \"../Login/FormValidate\";\r\nimport {profile} from \"../../redux/Selectors/propfile-selector\";\r\nimport {Redirect} from \"react-router\";\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\ntype EditFormParamTypeStringTypes = GetStringKeys<EditFormParamType>\r\n\r\n\r\nexport function  fieldCreator<GetStringKeys  extends string> (name:GetStringKeys,\r\n                           component:React.FC<WrappedFieldProps &  renderFieldType>,\r\n                           [validate]: Array<FieldValidatorType>,\r\n                           placeholder: string,\r\n                           type: string\r\n){\r\n    return  <Field name={name}\r\n                   component={component} validate={validate} placeholder={placeholder}\r\n                   type={type}/>\r\n}\r\ntype EditFormParamType={\r\n    LookingForAJobDescription:string | null\r\n    FullName: string | null\r\n    AboutMe:string | null\r\n    contacts: {\r\n        github: string | null\r\n        vk: string | null\r\n        facebook:string | null\r\n        instagram:string | null\r\n        twitter:string | null\r\n        website:string | null\r\n        youtube:string | null\r\n        mainLink:string | null\r\n    }\r\n}\r\n\r\nlet EditForm: React.FC<InjectedFormProps<EditFormParamType>> = ({ handleSubmit, error}) => {\r\n    let target = React.useRef(null)\r\nconsole.log(profile)\r\n    return (\r\n        <form onSubmit={handleSubmit} ref={target}>\r\n            <div>\r\n\r\n\r\n                <label>lookingForAJob\r\n                    <Field className={s.field}    name=\"lookingForAJob\" id=\"employed\" component={renderEditField} type=\"checkbox\" />\r\n                </label>\r\n\r\n\r\n                {fieldCreator<EditFormParamTypeStringTypes>('LookingForAJobDescription', renderEditField, [reqaer], 'lookingForAJob', 'text')}\r\n                {fieldCreator<EditFormParamTypeStringTypes>('FullName', renderEditField, [reqaer], 'fullName', 'text')}\r\n                {fieldCreator<EditFormParamTypeStringTypes>('AboutMe', renderEditField, [reqaer], 'aboutMe', 'text')}\r\n                {fieldCreator('contacts.github', renderEditField, [reqaer, website], 'github', 'text')}\r\n                {fieldCreator('contacts.vk', renderEditField, [reqaer, website], 'vk', 'text')}\r\n                {fieldCreator('contacts.facebook', renderEditField, [reqaer, website], 'facebook', 'text')}\r\n                {fieldCreator('contacts.instagram', renderEditField, [reqaer, website], 'instagram', 'text')}\r\n                {fieldCreator('contacts.twitter', renderEditField, [reqaer, website], 'twitter', 'text')}\r\n                {fieldCreator('contacts.website', renderEditField, [], 'website', 'text')}\r\n                {fieldCreator('contacts.youtube', renderEditField, [], 'youtube', 'text')}\r\n                {fieldCreator('contacts.mainLink', renderEditField, [], 'mainLink', 'text')}\r\n\r\n            </div>\r\n\r\n            {error ? <Overlay\r\n                show={true}\r\n                placement=\"right-start\"\r\n                target={target.current}\r\n                containerPadding={20}\r\n            >\r\n                <Popover id=\"popover-contained\">\r\n                    <Popover.Title as=\"h3\">Popover bottom</Popover.Title>\r\n                    <Popover.Content>\r\n                        <strong>{error}</strong> Check this info.\r\n                    </Popover.Content>\r\n                </Popover>\r\n            </Overlay> : \"\"\r\n\r\n            }\r\n            <Button style={{marginBottom: '250px'}} variant=\"light\" type=\"submit\">Submit</Button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n\r\nlet EditFormForm = reduxForm<EditFormParamType>({form: 'edit'})(EditForm)\r\nlet Edit:React.FC<mapDispatchToPropsType & mownPropsType>  = (props) => {\r\n\r\n    const onSubmit = (formData: EditFormParamType) => {\r\n        console.log(formData)\r\n        props.thunkChangProfile(formData)\r\n    }\r\n\r\n    if (!props.isAuth) {\r\n        return <Redirect to={\"/Detail\"}/>\r\n    }\r\n\r\n    return (<div>\r\n            <Container>\r\n                <h1 style={{color: 'white'}}>Edit Profile</h1>\r\n                <Row xl={12}>\r\n                    <Col sm={8}>\r\n                      <EditFormForm onSubmit={onSubmit}/>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype propsType = mownPropsType & mapDispatchToPropsType\r\ntype mownPropsType={\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToPropsType ={\r\n    thunkChangProfile: (formData: any)=> void\r\n}\r\n\r\n\r\nlet mapStateToProps = (state:AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, {thunkChangProfile})(Edit)\r\n","import React, {useRef} from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Button, Col, Container, Row, Overlay, Popover} from \"react-bootstrap\";\r\nimport {thunkLogin} from \"../../redux/Redusers/auth-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {GetStringKeys, renderField} from \"./FormValidate\";\r\nimport {minValue, reqaer} from \"../validations/validations\";\r\nimport { withRouter} from \"react-router-dom\";\r\n import s from './login.module.css'\r\nimport {compose} from \"redux\";\r\nimport {widthautAuthRedirect} from \"../hok/WidhAuthRedirect\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {fieldCreator} from \"../FormValidate/EditProfile\";\r\n\r\n\r\nlet minLenght = minValue(3)\r\nlet LoginForm: React.FC<InjectedFormProps<formDataType, mapStateToPropsType > & mapStateToPropsType> = ({handleSubmit, error,loading}) => {\r\n    let target = useRef(null)\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} ref={target}>\r\n            <div>\r\n                <label htmlFor=\"email\">email</label>\r\n                {fieldCreator<formDataTypeKey>(\"email\", renderField,[reqaer], \"email\", \"email\")}\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"password\">password</label>\r\n                {fieldCreator<formDataTypeKey>(\"password\", renderField,[reqaer, minLenght], \"password\", \"password\")}\r\n\r\n            </div>\r\n            {error ? <Overlay\r\n                show={true}\r\n                placement=\"right-start\"\r\n                target={target.current}\r\n                containerPadding={20}\r\n            >\r\n                <Popover id=\"popover-contained\">\r\n                    <Popover.Title as=\"h3\">Popover bottom</Popover.Title>\r\n                    <Popover.Content>\r\n                        <strong>{error}</strong>\r\n                    </Popover.Content>\r\n                </Popover>\r\n            </Overlay> : \"\"\r\n\r\n            }\r\n            <Button disabled={loading} variant=\"primary\"  type=\"submit\">Submit</Button>\r\n            <a className={s.href + \"light\"}   href=\"https://social-network.samuraijs.com/signUp\">Registration</a>\r\n\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\n\r\nlet ContactForm = reduxForm< formDataType, mapStateToPropsType>({form: 'contact'})(LoginForm)\r\n\r\ntype formDataTypeKey = GetStringKeys<formDataType>\r\ntype formDataType ={\r\n    email: string\r\n    password: string\r\n\r\n}\r\ntype mapDispatchToPropsType = {\r\n    thunkLogin: (formData: formDataType) => void\r\n}\r\nexport type mapStateToPropsType ={\r\n    loading: boolean\r\n}\r\n\r\nlet Login:React.FC<mapDispatchToPropsType & mapStateToPropsType>  = (props) => {\r\n    const onSubmit = (formData:formDataType) => {\r\n        props.thunkLogin(formData)\r\n    }\r\n    return (<div>\r\n            <Container>\r\n                <h1>Login</h1>\r\n                <Row xl={12}>\r\n                    <Col sm={8}>\r\n                        <ContactForm {...props} onSubmit={onSubmit}/>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state:AppStateType):mapStateToPropsType => ({\r\n    loading: state.auth.loading,\r\n})\r\nexport default compose(\r\n    withRouter,\r\n    widthautAuthRedirect,\r\n    connect(mapStateToProps, {thunkLogin}))(Login)\r\n","import React, {FC} from 'react';\r\nimport s from './Profile.module.css'\r\nimport Preloader from \"../Preloader/Preloader\";\r\nimport {profileType} from \"../../redux/Redusers/profile-reducers\";\r\n\r\n\r\ntype propsType ={\r\n    handleFile: (handleFile: File) => void\r\n    profile: profileType\r\n    userId: number\r\n\r\n}\r\n\r\nconst Profile:FC<propsType> = (props) => {\r\n\r\n\r\n    const hiddenFileInput = React.useRef<HTMLInputElement>(null);\r\n    const handleClick = () => {\r\n        if (hiddenFileInput && hiddenFileInput.current) {\r\n            hiddenFileInput.current.click();\r\n        }\r\n    };\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement> ) => {\r\n        const target= event.target;\r\n        const fileUploaded: File = (target.files as FileList)[0];\r\n        props.handleFile(fileUploaded);\r\n    };\r\n    if (!props.profile) {\r\n\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.card}>\r\n            {\r\n\r\n                props.profile && props.profile.userId  === props.userId ?\r\n                    <figure><img onClick={handleClick} style={{maxWidth: 100 + 'px'}}\r\n                                 src={props.profile.photos.small ? props.profile.photos.small : 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png'}\r\n                                 alt=\"#\"/>\r\n                        <input type=\"file\"\r\n                               style={{display: 'none'}}\r\n                               ref={hiddenFileInput}\r\n                               onChange={handleChange}\r\n                        /></figure> : <figure>\r\n                        <img style={{maxWidth: 100 + 'px'}}\r\n                             src={props.profile.photos.small ? props.profile.photos.small\r\n                                 : 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png'}\r\n                             alt=\"#\"/>\r\n                    </figure>\r\n            }\r\n\r\n\r\n            <div className={s.titles}>\r\n                <div>{props.profile.fullName}</div>\r\n                <div>LastName</div>\r\n            </div>\r\n            <ul style={{maxWidth: 200 + 'px' }}>\r\n                <li>{props.profile.aboutMe}</li>\r\n                <li>{props.profile.lookingForAJob ? 'Looking for job' : 'already heave'}</li>\r\n                <li>Job description: {props.profile.lookingForAJobDescription}</li>\r\n            </ul>\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n\r\n}\r\nexport default Profile","import React, {FC} from \"react\";\r\nimport s from \"./Detail.module.css\"\r\nimport Preloader from \"../Preloader/Preloader\";\r\nimport {contactsType, profileType} from \"../../redux/Redusers/profile-reducers\";\r\n\r\ntype contactType =  {\r\n    profile: profileType\r\n}\r\n\r\ntype propsType ={\r\n    title:string | null\r\n    value: string | null\r\n}\r\nconst Contact:React.FC<propsType> =({title, value})=> {\r\n  return(\r\n      <tr>\r\n        <td>{title}</td>\r\n        <td>{value}</td>\r\n  </tr>)\r\n}\r\n\r\nconst Detail:FC<contactType> = (props) => {\r\n\r\n    if (!props.profile) {\r\n\r\n        return <Preloader/>\r\n\r\n    }\r\n\r\n    return (<div className={s.greed}>\r\n            <table>\r\n                <tbody>\r\n                <tr>\r\n                    <td colSpan={2}>Contacts</td>\r\n                </tr>\r\n                {Object.keys(props.profile.contacts).map(m => {\r\n                    return <Contact title={m} value={props.profile.contacts[m as keyof contactsType]} />\r\n                } ) }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Detail","import React, {SetStateAction, useEffect, useState} from \"react\";\r\nimport s from \"./Status.module.css\"\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {profileType} from \"../../redux/Redusers/profile-reducers\";\r\n\r\ntype propsType ={\r\n    status: string\r\n    thunkPutStatus: (status: string) => void\r\n    profile: profileType\r\n    userId: number\r\n\r\n}\r\n\r\nconst Status:React.FC<propsType> = (props) => {\r\n    const [editMod, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n    let activeEditMode = (editMod: boolean) => {\r\n        setEditMode(editMod)\r\n    }\r\n    let disabledEditMode = (editMod: boolean) => {\r\n        setEditMode(editMod)\r\n        props.thunkPutStatus(status)\r\n    }\r\n    let changeStatus = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(event.target.value)\r\n    }\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    return (\r\n        <div className={s.width}>\r\n            <Form.Group>\r\n                { props.profile && props.profile.userId  === props.userId?\r\n                    <Form.Row>\r\n                        {!editMod ?\r\n                            <Form.Row   className={s.textColor} onClick={()=>activeEditMode(true)} >\r\n                                {props.status ? props.status : \"sss\"}\r\n                            </Form.Row> : <Col>\r\n                                <Form.Control onChange={changeStatus} className={s.collor}  size=\"sm\"\r\n                                           value={status}   type=\"text\" placeholder={props.status}/>\r\n                                <Button style={{float: 'left'}} onClick={()=>disabledEditMode(false)}>Sssubmit</Button>\r\n                            </Col>\r\n                        }\r\n                    </Form.Row> :  <Form.Row><Form.Label className={s.textColor}>{props.status}</Form.Label></Form.Row>  }\r\n            </Form.Group>\r\n        </div>\r\n    )\r\n}\r\nexport default Status","import React, {FC, useEffect} from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport Detail from \"./Detail\";\r\nimport Status from \"./Status\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {\r\n    handleFile,\r\n    profileType,\r\n    setStatus,\r\n    thunkGetStatus, thunkPutStatus,\r\n    thunkSetProfile\r\n} from \"../../redux/Redusers/profile-reducers\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {profile, status, userId} from \"../../redux/Selectors/propfile-selector\";\r\nimport {compose} from \"redux\";\r\n\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string,\r\n\r\n\r\n\r\n}\r\nexport type mapDispatchTypeProfile = {\r\n    thunkSetProfile:(userId: number) => void\r\n    thunkGetStatus:(userId: number) => void\r\n    handleFile: (handleFile: File) => void\r\n    thunkPutStatus: (status: string) => void\r\n}\r\n\r\ntype propsType  = {\r\n    userId: number\r\n\r\n\r\n}\r\n\r\n\r\nlet  ProfileClass:FC<RouteComponentProps<PathParamsType> & propsType & mapDispatchTypeProfile & mapStateToPropsType> = (props  ) => {\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        let userId:number = +props.match.params.userId\r\n        if (!props.match.params.userId) {\r\n            userId = props.userId\r\n        }\r\n        props.thunkSetProfile(userId)\r\n        props.thunkGetStatus(userId)\r\n    }, [props.match.params.userId])\r\n\r\n\r\n        return (<div >\r\n                <Container style={{textAlign: \"center\"}} >\r\n                    <Status\r\n                        {...props}\r\n                        status={props.status}\r\n                            thunkPutStatus={props.thunkPutStatus}\r\n                            profile={props.profile}\r\n                            userId={props.userId}\r\n                    />\r\n                    <Profile {...props}/>\r\n                    <Detail {...props}/>\r\n                </Container>\r\n\r\n            </div>\r\n\r\n        )\r\n\r\n}\r\ntype mapStateToPropsType = {\r\n    userId: number\r\n    profile: profileType\r\n    status: string\r\n\r\n}\r\nlet mapStateToProps = (state:AppStateType):mapStateToPropsType => {\r\n    return {\r\n        userId: userId(state),\r\n        profile: profile(state),\r\n        status: status(state),\r\n    }\r\n}\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {thunkSetProfile,thunkGetStatus, setStatus,thunkPutStatus, handleFile}),\r\n)(ProfileClass)\r\n    ","import React from 'react';\nimport 'materialize-css/dist/css/materialize.min.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Sidebar from \"./Components/Sidebar/Sidebar\";\nimport Footer from \"./Components/Footer/Footer\";\nimport { Route, withRouter} from \"react-router-dom\";\nimport StoriesContainer from \"./Components/Stories/StoriesContainer\";\nimport UsersContainer from \"./Components/Users/UsercContainer\";\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\nimport {Container} from \"react-bootstrap\";\nimport LoginCont from \"./Components/Login/Login\";\nimport {initializeThunk} from \"./redux/Redusers/app-reducer\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport Preloader from \"./Components/Preloader/Preloader\";\nimport EditCont from \"./Components/FormValidate/EditProfile\";\n\nimport ProfileClass from \"./Components/Profile/ProfilClass\";\n\n\nclass App extends React.Component {\n    componentDidMount() {\n        this.props.initializeThunk()\n    }\n    render() {\n        if (!this.props.isLoading) {\n            return <Preloader/>\n        }\n\n\n        return (\n\n            <div>\n                <HeaderContainer/>\n                <Container>\n                    <Sidebar/>\n\n                    { this.props.myId ? <Route exact path='/' render={() => <ProfileClass  />}/> : \"\"}\n                    <Route path={'/Detail/:userId?'} render={() => <ProfileClass  />}/>\n                    <Route path={'/Stories'} render={() => <StoriesContainer/>}/>\n                    <Route path={'/Users'} render={() => <UsersContainer/>}/>\n                    <Route path={'/Login'} render={() => <LoginCont/>}/>\n                    <Route path={'/Edit'} render={() => <EditCont/>}/>\n                </Container>\n                <Footer/>\n            </div>\n        );\n    }\n}\nlet mapStateToProps = (state) => {\n    return {\n        isLoading: state.app.isLoading,\n        myId: state.auth.id\n    }\n}\nexport default compose(\n    withRouter,\n    connect(mapStateToProps, {initializeThunk})\n)(App)\n\n\n","import './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/redux-store'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport React from \"react\";\n\nimport {Provider} from \"react-redux\";\nimport {HashRouter} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>,\n\n    </HashRouter>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stories-btn\":\"Stories_stories-btn__1-xJ1\",\"textarea\":\"Stories_textarea__1-0n6\",\"stories_btn\":\"Stories_stories_btn__25fnx\",\"stories_item\":\"Stories_stories_item__1VULi\",\"wrapper\":\"Stories_wrapper__YzyHd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tanks\":\"usrs_tanks__22GNy\",\"card\":\"usrs_card__31ZLW\",\"tratata\":\"usrs_tratata__24p65\",\"photo\":\"usrs_photo__1Uiac\",\"active\":\"usrs_active__N_X9q\",\"btn_wrap\":\"usrs_btn_wrap__12OOE\",\"status\":\"usrs_status__9MK4T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"width\":\"Status_width__27Vx0\",\"textColor\":\"Status_textColor__34Yh5\",\"collor\":\"Status_collor__uhaaM\"};"],"sourceRoot":""}